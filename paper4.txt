/*Q1. Two elements whose sum is closest to zero.

An Array of integers is given, both +ve and -ve. 
You need to find the two elements such that their sum is closest to zero. 
For the below array, the program should print -80 and 85. */


# include <stdio.h> 
# include <stdlib.h> 
# include <math.h> 
void minAbsSumPair(int arr[], int arr_size) 
{ 
  int inv_count = 0; 
  int l, r, min_sum, sum, min_l, min_r; 
  
 
  if(arr_size < 2) 
  { 
    printf("Invalid Input"); 
    return; 
  } 
  

  min_l = 0; 
  min_r = 1; 
  min_sum = arr[0] + arr[1]; 





  
  for(l = 0; l < arr_size - 1; l++) 
  { 
    for(r = l+1; r < arr_size; r++) 
    { 
      sum = arr[l] + arr[r]; 
      if(abs(min_sum) > abs(sum)) 
      { 
        min_sum = sum; 
        min_l = l; 
        min_r = r; 
      } 
    } 
  } 
  
  printf(" The two elements whose sum is minimum are %d and %d", 
          arr[min_l], arr[min_r]); 
} 
  

int main() 
{ 
  int arr[] = {1, 60, -10, 70, -80, 85}; 
  minAbsSumPair(arr, 6); 
  getchar(); 
  return 0; 
} 




/*Q3. Find the minimum distance between two numbers.

Given an unsorted array arr[] and two numbers x and y, find the minimum distance between x and y in arr[]. The array might also contain duplicates. You may assume that both x and y are different and present in arr[].

Input: arr[] = {1, 2}, x = 1, y = 2 
Output: Minimum distance between 1 and 2 is 1. 
Explanation: 1 is at index 0 and 2 is at index 1, so the distance is 1 

Input: arr[] = {3, 4, 5}, x = 3, y = 5 
Output: Minimum distance between 3 and 5 is 2. 
Explanation:3 is at index 0 and 5 is at index 2, so the distance is 2 

Input: arr[] = {3, 5, 4, 2, 6, 5, 6, 6, 5, 4, 8, 3}, x = 3, y = 6 
Output: Minimum distance between 3 and 6 is 4. 
Explanation:3 is at index 0 and 6 is at index 5, so the distance is 4 

Input: arr[] = {2, 5, 3, 5, 4, 4, 2, 3}, x = 3, y = 2 
Output: Minimum distance between 3 and 2 is 1. 
Explanation:3 is at index 7 and 2 is at index 6, so the distance is 1  */


#include <stdio.h>
#include <stdlib.h> 
#include <limits.h>
 
int minDist(int arr[], int n, int x, int y)
{
   int i, j;
   int min_dist = INT_MAX;
   for (i = 0; i < n; i++)
   {
     for (j = i+1; j < n; j++)
     {
         if( (x == arr[i] && y == arr[j] ||
              y == arr[i] && x == arr[j]) && min_dist > abs(i-j))
         {
              min_dist = abs(i-j);
         }
     }
   }
   return min_dist;
}
 

int main()
{
    int arr[] = {3, 5, 4, 2, 6, 5, 6, 6, 5, 4, 8, 3};
    int n = sizeof(arr)/sizeof(arr[0]);
    int x = 3;
    int y = 6;
 
    printf("Minimum distance between %d and %d is %d\n", x, y,
              minDist(arr, n, x, y));
    return 0;
}